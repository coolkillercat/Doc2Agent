{
  "approve_user": "Approves a pending user account.",
  "get_user_ssh_key": "Retrieves a specific SSH key for a given GitLab user.",
  "list_user_ssh_keys": "Retrieves all SSH keys associated with a specific user, identified by either their user ID or username.",
  "ban_user": "Bans a specified user from the GitLab instance.",
  "create_service_account": "Creates a service account user for automated processes or integrations.",
  "list_user_emails": "Retrieves a list of all email addresses associated with the authenticated user's account, showing each email's ID, address, and confirmation status.",
  "get_user_gpg_keys": "Retrieves all GPG keys associated with a specific GitLab user.",
  "disable_user_two_factor_authentication": "Disables two-factor authentication (2FA) for a specified user.",
  "get_user_preferences": "Retrieves the authenticated user's preferences including settings for viewing diffs, showing whitespace, and passing identities to CI JWT.",
  "get_user_contribution_events": "Retrieves contribution events for a specified GitLab user within an optional date range.",
  "list_ssh_keys": "Retrieves a list of the authenticated user's SSH keys with optional pagination.",
  "get_user_counts": "Retrieves counts of assigned issues, merge requests, review requests, and todos for the authenticated user.",
  "set_user_status": "quote('abc def') -> 'abc%20def'\n\nEach part of a URL, e.g.",
  "get_user_status": "Retrieves the current status of a GitLab user including their emoji, availability, message, and clear status time.",
  "update_user_preferences": "quote('abc def') -> 'abc%20def'\n\nEach part of a URL, e.g.",
  "list_group_users": "Retrieves a list of users associated with a specific group, including options to filter for SAML users or service accounts.",
  "deactivate_user": "Deactivates a specified user in the GitLab system.",
  "create_personal_access_token": "Creates a new personal access token for the currently authenticated user with k8s_proxy scope.",
  "get_user": "Retrieves detailed information about a specific user by their ID.",
  "reject_user": "quote('abc def') -> 'abc%20def'\n\nEach part of a URL, e.g.",
  "get_ssh_key": "Retrieve details of a specific SSH key associated with the user account.",
  "get_current_user": "Retrieves information about the currently authenticated user.",
  "unfollow_user": "quote('abc def') -> 'abc%20def'\n\nEach part of a URL, e.g.",
  "list_provisioned_users": "Retrieves a list of users provisioned by a specific group.",
  "unban_user": "quote('abc def') -> 'abc%20def'\n\nEach part of a URL, e.g.",
  "get_user_following": "Retrieve a list of users who the specified GitLab user is following.",
  "get_user_gpg_key": "Retrieves a specific GPG key for the authenticated user by its ID.",
  "activate_user": "Activates a specified user in the GitLab system.",
  "add_ssh_key": "Creates a new SSH key for the authenticated user with specified title, key content, optional expiration date, and usage scope (authentication, signing, or both).",
  "get_user_associations_count": "Retrieves counts of a user's associated projects, groups, issues, and merge requests.",
  "revoke_impersonation_token": "quote('abc def') -> 'abc%20def'\n\nEach part of a URL, e.g.",
  "add_email": "Creates a new email address for the authenticated user's account, enabling them to receive notifications and communications to this additional email.",
  "get_email_details": "Retrieves details of a specific email including the email address and confirmation timestamp.",
  "list_users": "Retrieves a list of GitLab users with comprehensive filtering options including by username, activity status, creation date, and user type.",
  "get_user_followers": "Retrieve a list of users who are following the specified GitLab user."
}